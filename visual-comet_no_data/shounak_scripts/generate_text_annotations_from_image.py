# -*- coding: utf-8 -*-
"""generate_text_annotations_from_image.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1htN8zlyPKZ4KfPTFshC8I2qs1WNpnV-k
"""
import sys
# if 'google.colab' in sys.modules:
#     print('Running in Colab.')
#     !pip3 install transformers==4.15.0 timm==0.4.12 fairscale==0.4.4
#     !git clone https://github.com/salesforce/BLIP
#     %cd BLIP



from PIL import Image
import requests
import torch
from torchvision import transforms
from torchvision.transforms.functional import InterpolationMode

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

def load_demo_image(image_path,image_size,device):
    #img_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/demo.jpg' 
    raw_image = Image.open(image_path) #Image.open(requests.get(img_url, stream=True).raw).convert('RGB')   

    w,h = raw_image.size
    #print(w,h)
    #display(raw_image.resize((w//5,h//5)))
    
    transform = transforms.Compose([
        transforms.Resize((image_size,image_size),interpolation=InterpolationMode.BICUBIC),
        transforms.ToTensor(),
        transforms.Normalize((0.48145466, 0.4578275, 0.40821073), (0.26862954, 0.26130258, 0.27577711))
        ]) 
    image = transform(raw_image).unsqueeze(0).to(device)   
    return image

event=[]
img_fn=[]
movie=[]
metadata_fn=[]
split=[]
place=[]

from models.blip import blip_decoder
from models.blip_vqa import blip_vqa

import glob
files = glob.glob("/home/shounak_rtml/11777/visual-comet/images2/social_iq/all/*.jpg")
print(files)

image_sizecap = 384

model_url = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_capfilt_large.pth'
    
model = blip_decoder(pretrained=model_url, image_size=image_sizecap, vit='base')
model.eval()
model = model.to(device)

print(files[0])
import os

path = files[0]

basename = os.path.basename(path)

print(basename)

print(basename.split('.')[0])

image_size = 384
model_urlvqa = 'https://storage.googleapis.com/sfr-vision-language-research/BLIP/models/model_base_vqa_capfilt_large.pth'
    
modelvqa = blip_vqa(pretrained=model_urlvqa, image_size=image_size, vit='base')
modelvqa.eval()
modelvqa = modelvqa.to(device)

from tqdm import tqdm
for path in tqdm(files):

  image = load_demo_image(image_path=path, image_size=image_sizecap, device=device)


  with torch.no_grad():
      # beam search
      caption = model.generate(image, sample=False, num_beams=3, max_length=20, min_length=5) 
      # nucleus sampling
      # caption = model.generate(image, sample=True, top_p=0.9, max_length=20, min_length=5) 
      #print('caption: '+caption[0])
      event.append(caption[0])
      #image = load_demo_image(image_path=path, image_size=image_size, device=device)
      question = 'is this indoors or outdoors?'

      answer = modelvqa(image, question, train=False, inference='generate') 
      #print('answer: '+answer[0])
      place.append(answer[0])
      
  split.append('val')
  movie.append('all')
  basename=os.path.basename(path)
  img_fn.append('all/'+basename)
  metadata_fn.append('all/'+basename.split('.')[0]+'.json')


  #for path in files:

  



import json
  
details = []

for i in range(len(files)):
  this_dict={"img_fn":img_fn[i],
             "movie":movie[i],
             "metadata_fn":metadata_fn[i],
             "split":split[i],
             "place":place[i],
             "event":event[i]
             }
  details.append(this_dict)

#print(details)
  
with open('/home/shounak_rtml/11777/visual-comet/data/visualcomet/val_annots.json', 'w') as convert_file:
     convert_file.write(json.dumps(details))

